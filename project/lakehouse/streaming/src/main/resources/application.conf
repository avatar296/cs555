# Spatial Temporal Analysis (STA) - Streaming Configuration
# Medallion Architecture Configuration

# Kafka Configuration
kafka {
  bootstrap.servers = "kafka:9092"
  bootstrap.servers = ${?KAFKA_BOOTSTRAP_SERVERS}
}

# Schema Registry Configuration
schema-registry {
  url = "http://schema-registry:8081"
  url = ${?SCHEMA_REGISTRY_URL}
}

# Iceberg Catalog Configuration
iceberg {
  catalog.name = "lakehouse"
  catalog.type = "jdbc"
  catalog.type = ${?ICEBERG_CATALOG_TYPE}
  warehouse.path = "s3a://lakehouse/warehouse"
  warehouse.path = ${?ICEBERG_WAREHOUSE_PATH}

  # JDBC Catalog Configuration
  jdbc.uri = "jdbc:postgresql://postgres-iceberg:5432/iceberg"
  jdbc.uri = ${?ICEBERG_JDBC_URI}
  jdbc.user = "iceberg"
  jdbc.user = ${?ICEBERG_JDBC_USER}
  jdbc.password = "iceberg123"
  jdbc.password = ${?ICEBERG_JDBC_PASSWORD}
}

# MinIO / S3 Configuration
s3 {
  endpoint = "http://minio:9000"
  endpoint = ${?S3_ENDPOINT}

  access.key = "admin"
  access.key = ${?S3_ACCESS_KEY}

  secret.key = "admin123"
  secret.key = ${?S3_SECRET_KEY}

  path.style.access = true
  ssl.enabled = false
}

# Checkpoint Configuration
# IMPORTANT: Use S3 for persistent checkpoints in production (survives container restarts)
# For development/local testing, can override with CHECKPOINT_BASE_PATH=/tmp/checkpoint
checkpoint {
  base.path = "s3a://lakehouse/checkpoints"
  base.path = ${?CHECKPOINT_BASE_PATH}
}

# Bronze Layer Topics
bronze {
  trips {
    topic = "trips.yellow"
    table = "lakehouse.bronze.trips"
    checkpoint = ${checkpoint.base.path}"/bronze/trips"
  }

  weather {
    topic = "weather.updates"
    table = "lakehouse.bronze.weather"
    checkpoint = ${checkpoint.base.path}"/bronze/weather"
  }

  events {
    topic = "special.events"
    table = "lakehouse.bronze.events"
    checkpoint = ${checkpoint.base.path}"/bronze/events"
  }
}

# Silver Layer Configuration
# SQL-First Pattern: Business logic in SQL files, minimal Java wrappers
silver {
  trips_cleaned {
    # Source: Bronze layer trips (raw data)
    source = "lakehouse.bronze.trips"

    # Target: Silver layer cleaned trips (validated data)
    table = "lakehouse.silver.trips_cleaned"

    # Checkpoint location (enables exactly-once processing)
    checkpoint = ${checkpoint.base.path}"/silver/trips_cleaned"

    # Data Quality Thresholds (TEACHABLE: Business rules as configuration)
    # For loan originations: Replace with credit rules
    quality {
      min_trip_distance = 0.1       # miles
      max_trip_distance = 200.0     # miles
      min_fare = 2.50               # USD (NYC yellow cab minimum)
      max_fare = 1000.0             # USD
      min_passengers = 1
      max_passengers = 6
    }
  }

  weather_cleaned {
    # Source: Bronze layer weather (external enrichment data)
    source = "lakehouse.bronze.weather"

    # Target: Silver layer cleaned weather (validated external data)
    table = "lakehouse.silver.weather_cleaned"

    # Checkpoint location
    checkpoint = ${checkpoint.base.path}"/silver/weather_cleaned"

    # Data Quality Thresholds (TEACHABLE: External data validation)
    # For loan originations: Credit bureau data validation thresholds
    quality {
      min_temperature = -20.0      # Fahrenheit (NYC winter extreme)
      max_temperature = 120.0      # Fahrenheit (extreme heat)
      max_precipitation = 10.0     # inches/hour (max realistic)
      max_wind_speed = 100.0       # mph (hurricane threshold)
    }
  }

  events_cleaned {
    # Source: Bronze layer events (special circumstances data)
    source = "lakehouse.bronze.events"

    # Target: Silver layer cleaned events (validated special circumstances)
    table = "lakehouse.silver.events_cleaned"

    # Checkpoint location
    checkpoint = ${checkpoint.base.path}"/silver/events_cleaned"

    # Data Quality Thresholds (TEACHABLE: Special circumstances validation)
    # For loan originations: Co-borrower/special program validation
    quality {
      min_attendance = 1
      max_attendance = 100000      # Madison Square Garden capacity
      max_event_duration_hours = 24
    }
  }
}

# Gold Layer Configuration
# Aggregated Analytics Pattern: Pre-computed metrics for dashboards
gold {
  trip_metrics_live {
    # Source: Silver layer cleaned trips (validated, enriched data)
    source = "lakehouse.silver.trips_cleaned"

    # Target: Gold layer live trip metrics (continuously updated aggregates)
    table = "lakehouse.gold.trip_metrics_live"

    # Checkpoint location
    checkpoint = ${checkpoint.base.path}"/gold/trip_metrics_live"
  }
}

# Streaming Configuration
streaming {
  trigger.interval = "10 seconds"
  trigger.interval = ${?TRIGGER_INTERVAL}

  starting.offsets = "earliest"
  fail.on.data.loss = false
}
